# -*- coding: utf-8 -*-
"""Submission_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12FU0TmVN4mw_mgeeLdFPwohB8stauRka

# Proyek Machine Learning (Recommedation System)
M. Ardifa Rizqi Ramadhan

# Import Library
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

"""# Data Understanding"""

url = "https://raw.githubusercontent.com/ardifa24/Machine-Learning-Terapan/refs/heads/main/Proyek-Recommendation-System/Coursera.csv"
courses = pd.read_csv(url)
courses.head()

courses.info()

print("Jumlah nilai unik:")
print("course_name:", courses['Course Name'].nunique())
print("difficulty:", courses['Difficulty Level'].nunique())
print("skills:", courses['Skills'].nunique())
print("course_description:", courses['Course Description'].nunique())

for name in courses['Course Name'].unique():
    print(name)

courses['University'].value_counts()

feature = 'Difficulty Level'

count = courses[feature].value_counts()
percent = 100 * courses['Difficulty Level'].value_counts(normalize=True)

df = pd.DataFrame({'Jumlah Sampel': count,'Persentase (%)': percent.round(1)})
print(df)

count.plot(kind='bar', title=f'Distribusi {feature}', ylabel='Jumlah Sampel', xlabel=feature, color='green', figsize=(8,5))
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Mayoritas kursus ditujukan untuk pemula (Beginner) dengan 41% (1444 kursus), menunjukkan fokus platform pada pembelajaran tingkat dasar.

**menunjukkan target utamanya adalah pengguna yang baru memulai pembelajaran di bidang tertentu. Ini bisa menjadi pertimbangan penting bagi lembaga pendidikan yang ingin menyasar segmen pemula.**

# Data Preparation

## Handling Missing Value
"""

courses.isnull().sum()

"""## Feature Selection"""

course = courses[['Course Name','Course Description', 'Skills']]
course.head()

"""## Column Renaming"""

course = course.rename(columns={'Course Name': 'Course_Name',
                                'Course Description': 'Course_Description',
                                'Skills': 'Skills'})
course.head()

"""# Model Development with Content Based Filtering"""

course.sample(5)

"""## TF-IDF Vectorizer"""

tf = TfidfVectorizer(stop_words='english')

tf.fit(course['Course_Name'])

tf.get_feature_names_out()

tfidf_matrix = tf.fit_transform(course['Course_Name'])

tfidf_matrix.shape

tfidf_matrix.todense()

pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=course.Skills
).sample(10, axis=1).sample(10, axis=0)

"""## Cosine Similarity"""

cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

cosine_sim_df = pd.DataFrame(cosine_sim, index=course['Course_Name'], columns=course['Course_Name'])
print('Shape:', cosine_sim_df.shape)

cosine_sim_df.sample(20, axis=1).sample(20, axis=0)

"""## Function Recommendation"""

def course_recommendations(nama_course, similarity_data=cosine_sim_df, items=course[['Course_Name','Course_Description', 'Skills']], k=5):
    """
    Rekomendasi course berdasarkan kemiripan dengan course lainnya.

    Parameter:
    - nama_course : nama course (str)
    - similarity_data : DataFrame similarity (simetris)
    - items : DataFrame course dan metadatanya
    - k : jumlah rekomendasi (int)

    Output:
    - DataFrame course rekomendasi dengan metadata
    """
    if nama_course not in similarity_data.columns:
        return f"Course '{nama_course}' tidak ditemukan dalam data."

    closest = similarity_data[nama_course].sort_values(ascending=False).iloc[1:k+1].index

    closest = closest[closest != nama_course]

    return items[items['Course_Name'].isin(closest)].reset_index(drop=True)

course_recommendations('Predictive Analytics and Data Mining')
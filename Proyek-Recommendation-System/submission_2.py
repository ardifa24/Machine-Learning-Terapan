# -*- coding: utf-8 -*-
"""Submission_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12FU0TmVN4mw_mgeeLdFPwohB8stauRka

# Proyek Machine Learning (Recommedation System)
M. Ardifa Rizqi Ramadhan

# Import Library
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import TfidfVectorizer

"""# Data Understanding"""

url = "https://raw.githubusercontent.com/ardifa24/Machine-Learning-Terapan/refs/heads/main/Proyek-Recommendation-System/Coursera.csv"
courses = pd.read_csv(url)
courses.head()

"""## Data Overview"""

courses.info()

"""Berdasarkan informasi diatas menunjukan bahwa:
* dataset ini berisi 3522 baris dan 7 kolom
* seluruh data bertipe data object
(string atau teks)
* Tidak terdapat data kosong (null) di setiap kolom

## University Course Distribution
"""

courses['University'].value_counts()

"""Dari hasil analisis, diketahui bahwa:

- **Coursera Project Network** menjadi penyedia kursus terbanyak dengan **562 kursus**.
- Universitas lain dengan kontribusi kursus yang signifikan antara lain:
  - **University of Illinois at Urbana-Champaign**: 138 kursus
  - **Johns Hopkins University**: 110 kursus
  - **University of Colorado Boulder**: 101 kursus
  - **University of Michigan**: 101 kursus
- Terdapat banyak universitas yang hanya menyediakan **1 kursus** di platform ini.

## Difficulty Level Distribution
"""

feature = 'Difficulty Level'

count = courses[feature].value_counts()
percent = 100 * courses['Difficulty Level'].value_counts(normalize=True)

df = pd.DataFrame({'Jumlah Sampel': count,'Persentase (%)': percent.round(1)})
print(df)

count.plot(kind='bar', title=f'Distribusi {feature}', ylabel='Jumlah Sampel', xlabel=feature, color='green', figsize=(8,5))
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""Mayoritas kursus ditujukan untuk pemula (Beginner) dengan 41% (1444 kursus), menunjukkan fokus platform pada pembelajaran tingkat dasar.

**menunjukkan target utamanya adalah pengguna yang baru memulai pembelajaran di bidang tertentu. Ini bisa menjadi pertimbangan penting bagi lembaga pendidikan yang ingin menyasar segmen pemula.**

# Data Preparation

## Handling Missing Value
"""

courses.isnull().sum()

"""Tidak terdapat missing values pada ke-tujuh kolom (Course Name, University, Difficulty Level, Course Rating, Course URL, Course Description, dan Skills) dalam dataset.

## Feature Selection
"""

course = courses[['Course Name','Course Description', 'Skills']]
course.head()

"""Dilakukan pemilihan fitur (kolom) yang relevan untuk sistem rekomendasi, yaitu:  
   - Course Name  
   - Course Description
   - Skills  
   Ketiga kolom ini dipilih karena mengandung informasi deskriptif yang dapat merepresentasikan isi kursus.

## Column Renaming
"""

course = course.rename(columns={'Course Name': 'Course_Name',
                                'Course Description': 'Course_Description',
                                'Skills': 'Skills'})
course.head()

"""Nama kolom disesuaikan (diubah menjadi format snake_case) untuk memudahkan pemanggilan dan menjaga konsistensi penamaan variabel:  
   - 'Course Name' → 'Course_Name'  
   - 'Course Description' → 'Course_Description'  
   - 'Skills' tetap.

## TF-IDF Vectorizer
"""

# Inisialisasi TfidfVectorizer
tf = TfidfVectorizer()

# Melakukan perhitungan idf pada data Course_Name
tf.fit(course['Course_Name'])

# Mapping array
tf.get_feature_names_out()

# Melakukan fit lalu ditransformasikan ke bentuk matrix
tfidf_matrix = tf.fit_transform(course['Course_Name'])

# Melihat ukutan matrix tf-idf
tfidf_matrix.shape

# Mengonversi vektor tf-idf dalam bentuk matrix dengan fungsi todense().
tfidf_matrix.todense()

# Membuat dataframe untuk melihat tf-idf matrix
pd.DataFrame(
    tfidf_matrix.todense(),
    columns=tf.get_feature_names_out(),
    index=course.Skills
).sample(10, axis=1).sample(10, axis=0)

"""# Model Development with Content Based Filtering

## Cosine Similarity
"""

# Menghitung cosine similarity pad matrix tf-idf
cosine_sim = cosine_similarity(tfidf_matrix)
cosine_sim

# Membuat dataframe dari variabel cosine_sim dengan baris dan kolom berupa nama course
cosine_sim_df = pd.DataFrame(cosine_sim, index=course['Course_Name'], columns=course['Course_Name'])
print('Shape:', cosine_sim_df.shape)

# Melihat similarity matrix pada setiap course
cosine_sim_df.sample(100, axis=1).sample(100, axis=0)

"""## Function Recommendation"""

def course_recommendations(nama_course, similarity_data=cosine_sim_df, items=course[['Course_Name','Course_Description', 'Skills']], k=5):
    """
    Rekomendasi course berdasarkan kemiripan dengan course lainnya.

    Parameter:
    - nama_course : nama course (str)
    - similarity_data : DataFrame similarity (simetris)
    - items : DataFrame course dan metadatanya
    - k : jumlah rekomendasi (int)

    Output:
    - DataFrame course rekomendasi dengan metadata
    """
    if nama_course not in similarity_data.columns:
        return f"Course '{nama_course}' tidak ditemukan dalam data."

    closest = similarity_data[nama_course].sort_values(ascending=False).iloc[1:k+1].index

    closest = closest[closest != nama_course]

    return items[items['Course_Name'].isin(closest)].reset_index(drop=True)

course_recommendations('Predictive Analytics and Data Mining')

"""# Evaluation"""

ground_truth = [
    'Predictive Modeling and Analytics',
    'Data Mining Project',
    'Design Thinking and Predictive Analytics for Data Products',
    'Population Health: Predictive Analytics',
    'Text Mining and Analytics'
]

rekomendasi = course_recommendations('Predictive Analytics and Data Mining')

precision = len(set(rekomendasi['Course_Name']) & set(ground_truth)) / len(rekomendasi)
print(f'Precision: {precision:.2f}')